package lyc.compiler;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import lyc.compiler.files.SymbolTableGenerator;
import lyc.compiler.files.TripleManager;

class Parser;


parser code {:
    private HashMap<String, String> cmp_map = new HashMap<String,String>();
    private ArrayList<String> identifiers_list = new ArrayList<String>();
:}

init with {:
     cmp_map.put("EQUAL","BNE");
     cmp_map.put("NOT_EQUAL","BEQ");
     cmp_map.put("LESS_EQUAL","BGT");
     cmp_map.put("GREATER_EQUAL","BLT");
     cmp_map.put("LESS","BGE");
     cmp_map.put("GREATER","BLE");
:}

// Terminals

terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;

terminal EQUAL;
terminal NOT_EQUAL;
terminal LESS_EQUAL;
terminal GREATER_EQUAL;
terminal LESS;
terminal GREATER;

terminal ASSIG;

terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;

terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;

terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;

terminal COMMA;
terminal COLON;

terminal WHILE;
terminal IF;
terminal ELSE;
terminal INIT;
terminal TYPE_INT;
terminal TYPE_FLOAT;
terminal TYPE_STRING;

terminal READ;
terminal WRITE;

terminal AND;
terminal OR;
terminal NOT;

terminal REORDER_FUNCTION;
terminal NEGATIVE_CALCULATION_FUNCTION;

terminal String INTEGER_CONSTANT;
terminal String FLOAT_CONSTANT;
terminal String STRING_CONSTANT;
terminal String IDENTIFIER;

// Non Terminals
non terminal start_symbol;
non terminal program;
non terminal var_declaration;
non terminal iteration;
non terminal selection;
non terminal sentence;
non terminal assignment;

non terminal String expression;
non terminal String term;
non terminal String factor;
non terminal String constant;

non terminal String condition;
non terminal String comparation;
non terminal String comparator;

non terminal list_declaration;
non terminal var_list;
non terminal String var_type;
non terminal function;
non terminal negative_function;
non terminal reorder_function;
non terminal arguments;
non terminal arguments_list;
non terminal float_list;
non terminal float_element;
non terminal write_args;

// Start Symbol Definition
start with start_symbol;

// Rules
start_symbol        ::= program {: System.out.println("End"); :}
                        ;

program             ::= program sentence {: System.out.println("program = program sentence"); :} |
                        sentence {: System.out.println("program = sentence"); :}
                        ;

sentence            ::= assignment {: System.out.println("sentence = assignment"); :} |
                        var_declaration {: System.out.println("sentence = var_declaration"); :} |
                        iteration {: System.out.println("sentence = iteration"); :} |
                        selection {: System.out.println("sentence = selection"); :} |
                        function {: System.out.println("sentence = function"); :}
                        ;

assignment          ::= IDENTIFIER:id ASSIG expression:e
                        {:
                            TripleManager.addTriple("=",id,"[" + e + "]");
                            System.out.println("assignment = id = expression");
                        :} |
                        IDENTIFIER ASSIG negative_function
                        {:
                            System.out.println("assignment = id=negative_function");
                        :} |
                        IDENTIFIER:id ASSIG STRING_CONSTANT:sc
                        {:
                            TripleManager.addTriple("=",id,sc);
                            System.out.println("assignment = id=string_constant");
                        :}
                        ;

selection           ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET
                        {: System.out.println("selection = if (condition) { program }"); :} |
                        IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET ELSE OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET
                        {: System.out.println("selection = if (condition) { program } else { program }"); :}
                        ;

iteration           ::= WHILE OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET
                        {: System.out.println("while (condition) { program }"); :}
                        ;

var_declaration     ::= INIT OPEN_CURLY_BRACKET list_declaration CLOSE_CURLY_BRACKET
                        {: System.out.println("init { list_declaration }"); :}
                        ;

list_declaration    ::= list_declaration var_list COLON var_type:vt
                        {:
                            for(String id : identifiers_list) {
                                SymbolTableGenerator.insertVariable(id, vt);
                            }
                            identifiers_list.clear();
                            System.out.println("list_declaration = list_declaration var_list : var_type");
                        :} |
                        var_list COLON var_type:vt
                        {:
                            for(String id : identifiers_list) {
                                SymbolTableGenerator.insertVariable(id, vt);
                            }
                            identifiers_list.clear();
                            System.out.println("list_declaration = var_list : var_type");
                        :}
                        ;

var_list            ::= var_list COMMA IDENTIFIER:id
                        {:
                            identifiers_list.add(id);
                            System.out.println("var_list = var_list , IDENTIFIER");
                        :} |
                        IDENTIFIER:id
                        {:
                            identifiers_list.add(id);
                            System.out.println("var_list = IDENTIFIER");
                        :}
                        ;

var_type            ::= TYPE_INT
                        {:
                            RESULT = "int";
                            System.out.println("int");
                        :} |
                        TYPE_FLOAT
                        {:
                            RESULT = "float";
                            System.out.println("float");
                        :} |
                        TYPE_STRING
                        {:
                            RESULT = "string";
                            System.out.println("string");
                        :}
                        ;

expression          ::= expression:e PLUS term:t
                        {:
                            int index = TripleManager.addTriple("+","[" + e + "]", "[" + t + "]");
                            RESULT = Integer.toString(index);
                            System.out.println("+");
                        :} |
                        expression:e SUB term:t
                        {:
                            int index = TripleManager.addTriple("-","[" + e + "]", "[" + t + "]");
                            RESULT = Integer.toString(index);
                            System.out.println("-");
                        :} |
                        term:t
                        {:
                            RESULT = t;
                            System.out.println("Expression = Term");
                        :}
                        ;

term                ::= term:t MULT factor:f
                        {:
                            int index = TripleManager.addTriple("*", "[" + t + "]", "[" + f + "]");
                            RESULT = Integer.toString(index);
                            System.out.println("*");
                        :} |
                        term:t DIV factor:f
                        {:
                            int index = TripleManager.addTriple("/","[" + t + "]", "[" + f + "]");
                            RESULT = Integer.toString(index);
                            System.out.println("/");
                        :} |
                        factor:f
                        {:
                            RESULT = f;
                            System.out.println("Term = factor");
                        :}
                        ;

factor              ::= IDENTIFIER:id
                        {:
                            int index = TripleManager.addTriple(id,null,null);
                            RESULT = Integer.toString(index);
                            System.out.println("Id: " + id);
                        :} |
                        SUB IDENTIFIER:id
                        {:
                            int index = TripleManager.addTriple("-",id,null);
                            RESULT = Integer.toString(index);
                            System.out.println("Id: " + id);
                        :}
                        |
                        constant:cte
                        {:
                            int index = TripleManager.addTriple(cte, null, null);
                            RESULT = Integer.toString(index);
                            System.out.println("Constant: " + cte);
                        :} |
                        SUB constant:cte
                        {:
                            int index = TripleManager.addTriple("-", cte, null);
                            RESULT = Integer.toString(index);
                            System.out.println("Constant: " + cte);
                        :} |
                        OPEN_BRACKET expression:e CLOSE_BRACKET
                        {:
                            RESULT = e;
                            System.out.println("Factor = (Expression)");
                        :}
                        ;

constant            ::= INTEGER_CONSTANT:i
                        {:
                            // RESULT = SymbolTableGenerator.SymbolT(i, "int");
                            RESULT = i;
                        :} |
                        FLOAT_CONSTANT:f
                        {:
                            RESULT = f;
                        :}
                        ;

condition           ::= comparation:cmp
                        {:
                            TripleManager.addTriple(cmp, "GOTO", null);
                            System.out.println("condition = comparation");
                        :} |
                        NOT comparation:cmp {:
                            System.out.println("condition = NOT comparation");
                        :} |
                        comparation:cmp OR comparation:cmp2 {:
                            System.out.println("condition = comparation OR comparation");
                        :} |
                        comparation:cmp AND comparation:cmp2 {:
                            System.out.println("condition = comparation AND comparation");
                        :}
                        ;

comparation         ::= expression:e1 comparator:cmp expression:e2
                        {:
                            TripleManager.addTriple("CMP", "[" + e1 + "]", "[" + e2 + "]");
                            RESULT = cmp;
                            System.out.println("comparation = expression comparator expression");
                        :};

comparator          ::= EQUAL
                        {:
                            RESULT = cmp_map.get("EQUAL");
                            System.out.println("==");
                        :} |
                        NOT_EQUAL
                        {:
                            RESULT = cmp_map.get("NOT_EQUAL");
                            System.out.println("!=");
                        :} |
                        LESS_EQUAL
                        {:
                            RESULT = cmp_map.get("LESS_EQUAL");
                            System.out.println("<=");
                        :} |
                        GREATER_EQUAL
                        {:
                            RESULT = cmp_map.get("GREATER_EQUAL");
                            System.out.println(">=");
                        :} |
                        LESS
                        {:
                            RESULT = cmp_map.get("LESS");
                            System.out.println("<");
                        :} |
                        GREATER
                        {:
                            RESULT = cmp_map.get("GREATER");
                            System.out.println(">");
                        :}
                        ;

function            ::= reorder_function
                        {:
                            System.out.println("function = reorder_function");
                        :} |
                        READ OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET
                        {:
                            int index = TripleManager.addTriple("READ", id, null);
                            RESULT = Integer.toString(index);
                            System.out.println("function = read ( IDENTIFIER )");
                        :} |
                        WRITE OPEN_BRACKET write_args:wa CLOSE_BRACKET
                        {:
                            int index = TripleManager.addTriple("WRITE", wa, null);
                            RESULT = Integer.toString(index);
                            System.out.println("function = write ( write_args )");
                        :}
                        ;

write_args          ::= IDENTIFIER:id
                        {:
                            RESULT = id;
                            System.out.println("write_args = IDENTIFIER");
                        :} |
                        STRING_CONSTANT:sc
                        {:
                            RESULT = sc;
                            System.out.println("write_args = string_constant");
                        :} |
                        constant:cte
                        {:
                            RESULT = cte;
                            System.out.println("write_args = constant");
                        :}
                        ;

arguments           ::= OPEN_SQUARE_BRACKET arguments_list CLOSE_SQUARE_BRACKET COMMA INTEGER_CONSTANT COMMA INTEGER_CONSTANT {: System.out.println("arguments = [arguments_list], integer_constant, integer_constant"); :}
                        ;

arguments_list      ::= arguments_list COMMA expression {: System.out.println("arguments_list = arguments_list , expression"); :} |
                        expression {: System.out.println("arguments_list = expression"); :}
                        ;

negative_function   ::= NEGATIVE_CALCULATION_FUNCTION OPEN_BRACKET float_list CLOSE_BRACKET {: System.out.println("negative_function = negativeCalculation ( float_list )"); :}
                        ;

reorder_function    ::=  REORDER_FUNCTION OPEN_BRACKET arguments CLOSE_BRACKET {: System.out.println("reorder_function = reorder ( arguments )"); :}
                        ;

float_list          ::= float_element:f {: System.out.println("float_list =" + f); :} |
                        float_list COMMA float_element {: System.out.println("float_list , float_element"); :}
                        ;

float_element       ::= IDENTIFIER:id  {: RESULT = id; :} |
                        FLOAT_CONSTANT:f {: RESULT = f; :} |
                        SUB IDENTIFIER:id  {: RESULT = id; :} |
                        SUB FLOAT_CONSTANT:f {: RESULT = f; :}
                        ;


