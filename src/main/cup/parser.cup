package lyc.compiler;

import java_cup.runtime.*;

class Parser;

// Terminals

terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;

terminal EQUAL;
terminal NOT_EQUAL;
terminal LESS_EQUAL;
terminal GREATER_EQUAL;
terminal LESS;
terminal GREATER;

terminal ASSIG;

terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;

terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;

terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;

terminal COMMA;
terminal COLON;

terminal WHILE;
terminal IF;
terminal ELSE;
terminal INIT;
terminal TYPE_INT;
terminal TYPE_FLOAT;
terminal TYPE_STRING;

terminal READ;
terminal WRITE;

terminal AND;
terminal OR;
terminal NOT;

terminal REORDER_FUNCTION;
terminal NEGATIVE_CALCULATION_FUNCTION;

terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;
terminal IDENTIFIER;

// Non Terminals
non terminal start_symbol;
non terminal program;
non terminal var_declaration;
non terminal iteration;
non terminal selection;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal condition;
non terminal comparation;
non terminal comparator;
non terminal list_declaration;
non terminal var_list;
non terminal var_type;

// Start Symbol Definition
start with start_symbol;

// Rules
start_symbol ::= program;

program ::= program sentence
          | sentence
          ;

sentence ::= assignment {: System.out.println("End"); :}
           | var_declaration
           | iteration
           | selection
           ;

assignment ::= IDENTIFIER ASSIG expression {: System.out.println("Assignment"); :};

selection ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET
            | IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET ELSE OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET
            ;

iteration ::= WHILE OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET;

var_declaration ::= INIT OPEN_CURLY_BRACKET list_declaration CLOSE_CURLY_BRACKET;

list_declaration ::= list_declaration var_list COLON var_type
                   | var_list COLON var_type
                   ;

var_list ::= var_list COMMA IDENTIFIER
           | IDENTIFIER
           ;

var_type ::= TYPE_INT
           | TYPE_FLOAT
           | TYPE_STRING
           ;

expression ::= expression PLUS term {: System.out.println("+"); :}
             | expression SUB term {: System.out.println("-"); :}
             | term {: System.out.println("Expression = Term"); :}
             ;

term ::= term MULT factor {: System.out.println("*"); :}
       |term DIV factor {: System.out.println("/"); :}
       |factor {: System.out.println("Term = factor"); :}
       ;

factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id); :}
         | INTEGER_CONSTANT:constant {: System.out.println("Constant: " + constant ); :}
         | OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :}
         ;

condition ::= comparation
            | condition AND comparation
            | condition OR comparation
            ;

comparation ::= expression comparator expression;

comparator ::= EQUAL
             | NOT_EQUAL
             | LESS_EQUAL
             | GREATER_EQUAL
             | LESS
             | GREATER
             ;