package lyc.compiler;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import lyc.compiler.files.SymbolTableGenerator;
import lyc.compiler.files.TripleManager;
import lyc.compiler.model.InvalidTypeException;
import lyc.compiler.model.UndefinedVariableException;

class Parser;

parser code {:
    private int elemCount = 1;
    private HashMap<String, String> cmp_map = new HashMap<String,String>();
    private ArrayList<String> identifiers_list = new ArrayList<String>();
    private Stack<Integer> jumpStack = new Stack<>();
    private Stack<Integer> negStack = new Stack<>();
    private Stack<Integer> factorStack = new Stack<>();
    private Stack<Integer> termStack = new Stack<>();
    private Stack<Integer> exprStack = new Stack<>();
    private ArrayList<String> reorderList = new ArrayList();
    private int cte_idx, factor_idx, term_idx, exp_idx, exp_idx_aux;
    lyc.compiler.files.AsmCodeGenerator asmGen = new lyc.compiler.files.AsmCodeGenerator();

    private void clearStacks() {
            exprStack.clear();
            termStack.clear();
            factorStack.clear();
    }
:}

init with {:
     cmp_map.put("EQUAL","BNE");
     cmp_map.put("NOT_EQUAL","BEQ");
     cmp_map.put("LESS_EQUAL","BGT");
     cmp_map.put("GREATER_EQUAL","BLT");
     cmp_map.put("LESS","BGE");
     cmp_map.put("GREATER","BLE");
:}

// Terminals

terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;

terminal EQUAL;
terminal NOT_EQUAL;
terminal LESS_EQUAL;
terminal GREATER_EQUAL;
terminal LESS;
terminal GREATER;

terminal ASSIG;

terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;

terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;

terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;

terminal COMMA;
terminal COLON;

terminal WHILE;
terminal IF;
terminal ELSE;
terminal INIT;
terminal TYPE_INT;
terminal TYPE_FLOAT;
terminal TYPE_STRING;

terminal READ;
terminal WRITE;

terminal AND;
terminal OR;
terminal NOT;

terminal REORDER_FUNCTION;
terminal NEGATIVE_CALCULATION_FUNCTION;

terminal String INTEGER_CONSTANT;
terminal String FLOAT_CONSTANT;
terminal String STRING_CONSTANT;
terminal String IDENTIFIER;

// Non Terminals
non terminal start_symbol;
non terminal program;
non terminal var_declaration;
non terminal iteration;
non terminal selection;
non terminal sentence;
non terminal assignment;

non terminal SymbolTableGenerator.SymbolT expression;
non terminal SymbolTableGenerator.SymbolT term;
non terminal SymbolTableGenerator.SymbolT factor;
non terminal SymbolTableGenerator.SymbolT constant;

non terminal String condition;
non terminal String comparation;
non terminal String comparator;

non terminal list_declaration;
non terminal var_list;
non terminal String var_type;
non terminal function;
non terminal negative_function;
non terminal reorder_function;
non terminal arguments;
non terminal Integer arguments_list;
non terminal float_list;
non terminal float_element;
non terminal write_args;

// Start Symbol Definition
start with start_symbol;

// Rules
start_symbol        ::= program
                        {:
                            asmGen.generate(TripleManager.getTriples(), SymbolTableGenerator.getTable());
                            System.out.println("End");
                        :}
                        ;

program             ::= program sentence {: System.out.println("program = program sentence"); :} |
                        sentence {: System.out.println("program = sentence"); :}
                        ;

sentence            ::= assignment {: System.out.println("sentence = assignment"); :} |
                        var_declaration {: System.out.println("sentence = var_declaration"); :} |
                        iteration {: System.out.println("sentence = iteration"); :} |
                        selection {: System.out.println("sentence = selection"); :} |
                        function {: System.out.println("sentence = function"); :}
                        ;

assignment          ::= IDENTIFIER:id ASSIG expression:e
                        {:
                            SymbolTableGenerator.SymbolT sym = SymbolTableGenerator.getSymbol(id);
                            if(sym != null && e != null) {
                                if(sym.getType() == e.getType()) {
                                    int resultIdx = exprStack.pop();
                                    TripleManager.addTriple("=", id, "[" + resultIdx + "]");
                                } else {
                                    throw new InvalidTypeException("El tipo de la variable " + sym.getName() + ": " + sym.getType() +
                                    " no corresponde con el tipo de la expresion " + e.getName() + ": " + e.getType());
                                }
                            } else {
                                 throw new UndefinedVariableException("La variable: "+ id + " no ha sido definida.");
                            }
                             clearStacks();
                            System.out.println("assignment = id = expression");
                        :} |
                        IDENTIFIER:id ASSIG negative_function
                        {:
                            SymbolTableGenerator.SymbolT sym = SymbolTableGenerator.getSymbol(id);
                            if(sym != null) {
                                if(sym.getType() == "float") {
                                    TripleManager.addTriple("=",id,"@total");
                                } else {
                                    throw new InvalidTypeException("variable de asignacion tiene que ser del tipo float pero es del tipo " + sym.getType());
                                }
                            } else {
                                throw new UndefinedVariableException("La variable: "+ id + " no ha sido definida.");
                            }
                            System.out.println("assignment = id = negative_function");
                        :} |
                        IDENTIFIER:id ASSIG STRING_CONSTANT:sc
                        {:
                            SymbolTableGenerator.SymbolT sym_sc = SymbolTableGenerator.getSymbol(sc);
                            SymbolTableGenerator.SymbolT sym_id = SymbolTableGenerator.getSymbol(id);

                            if(sym_sc != null && sym_id != null) {
                                if(sym_sc.getType() == sym_id.getType()) {
                                    TripleManager.addTriple("=",id,sym_sc.getName());
                                } else {
                                    throw new InvalidTypeException("El tipo de la variable " + sym_id.getName() + ": " + sym_id.getType() +
                                    " no corresponde con el tipo de la expresion " + sym_sc.getName() + ": " + sym_sc.getType());
                                }
                            } else {
                                 throw new UndefinedVariableException("La variable: "+ id + " no ha sido definida.");
                            }

                            System.out.println("assignment = id = string_constant");
                        :}
                        ;

selection           ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET
                        {:
                            // Si fue falso salta al final del programa
                            int falseIdx = jumpStack.pop();
                            int endIdx = TripleManager.addTriple("ET", "END_IF", null);
                            TripleManager.patchTriple(falseIdx, endIdx);
                            System.out.println("selection = if (condition) { program }");
                        :} |
                        IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET
                        {:
                            // Si fue falso salta al else
                            int falseIdx = jumpStack.pop();
                            int elseIdx = TripleManager.addTriple("ET", "IF_ELSE", null);
                            TripleManager.patchTriple(falseIdx, elseIdx);

                            // Si fue verdadero se evita el else
                            int biIdx = TripleManager.addTriple("BI", "GOTO", null);
                            jumpStack.push(biIdx);
                        :}
                        ELSE OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET
                        {:
                            // Se hace ese salto sobre el else
                            int biIdx = jumpStack.pop();
                            int endIdx = TripleManager.addTriple("ET", "END_IF", null);
                            TripleManager.patchTriple(biIdx, endIdx);
                            System.out.println("selection = if (condition) { program } else { program }");
                        :}
                        ;

iteration           ::= WHILE OPEN_BRACKET
                        {:
                            // Etiqueta al inicio para iterar
                            int etIdx = TripleManager.addTriple("ET", "WHILE", null);
                            jumpStack.push(etIdx);
                        :}
                        condition CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET
                        {:
                            // Si la condición es falsa sale del while
                            int falseIdx = jumpStack.pop();

                            // Bifurcación al inicio para evaluar de nuevo la condicion
                            int biIdx = TripleManager.addTriple("BI", "GOTO", null);
                            int etIdx = jumpStack.pop();
                            TripleManager.patchTriple(biIdx, etIdx);

                            int endIdx = TripleManager.addTriple("ET", "END_WHILE", null);
                            TripleManager.patchTriple(falseIdx, endIdx);

                            System.out.println("while (condition) { program }");
                        :};

var_declaration     ::= INIT OPEN_CURLY_BRACKET list_declaration CLOSE_CURLY_BRACKET
                        {: System.out.println("init { list_declaration }"); :}
                        ;

list_declaration    ::= list_declaration var_list COLON var_type:vt
                        {:
                            for(String id : identifiers_list) {
                                SymbolTableGenerator.insertVariable(id, vt);
                            }
                            identifiers_list.clear();
                            System.out.println("list_declaration = list_declaration var_list : var_type");
                        :} |
                        var_list COLON var_type:vt
                        {:
                            for(String id : identifiers_list) {
                                SymbolTableGenerator.insertVariable(id, vt);
                            }
                            identifiers_list.clear();
                            System.out.println("list_declaration = var_list : var_type");
                        :}
                        ;

var_list            ::= var_list COMMA IDENTIFIER:id
                        {:
                            identifiers_list.add(id);
                            System.out.println("var_list = var_list , IDENTIFIER");
                        :} |
                        IDENTIFIER:id
                        {:
                            identifiers_list.add(id);
                            System.out.println("var_list = IDENTIFIER");
                        :}
                        ;

var_type            ::= TYPE_INT
                        {:
                            RESULT = "int";
                            System.out.println("int");
                        :} |
                        TYPE_FLOAT
                        {:
                            RESULT = "float";
                            System.out.println("float");
                        :} |
                        TYPE_STRING
                        {:
                            RESULT = "string";
                            System.out.println("string");
                        :}
                        ;

expression          ::= expression:e PLUS term:t
                        {:
                            if(e != null && t != null) {
                                if(e.getType() == t.getType()) {
                                    int right = termStack.pop();
                                    int left = exprStack.pop();
                                    exp_idx = TripleManager.addTriple("+", "[" + left + "]", "[" + right + "]");
                                    exprStack.push(exp_idx);
                                } else {
                                    throw new InvalidTypeException("No se puede sumar un " + e.getType() + " con un " + t.getType());
                                }
                            }
                            RESULT = t;
                            System.out.println("+");
                        :} |
                        expression:e SUB term:t
                        {:
                            if(e != null && t != null) {
                                if(e.getType() == t.getType()) {
                                    int right = termStack.pop();
                                    int left = exprStack.pop();
                                    exp_idx = TripleManager.addTriple("-", "[" + left + "]", "[" + right + "]");
                                    exprStack.push(exp_idx);
                                } else {
                                    throw new InvalidTypeException("No se puede restar un " + e.getType() + " con un " + t.getType());
                                }
                            }
                            RESULT = t;
                            System.out.println("-");
                        :} |
                        term:t
                        {:
                            exp_idx = termStack.pop();
                            exprStack.push(exp_idx);
                            RESULT = t;
                            System.out.println("Expression = Term");
                        :}
                        ;

term                ::= term:t MULT factor:f
                        {:
                            if(t != null && f != null) {
                                if(t.getType() == f.getType()) {
                                    int right = factorStack.pop();
                                    int left = termStack.pop();
                                    term_idx = TripleManager.addTriple("*", "[" + left + "]", "[" + right + "]");
                                    termStack.push(term_idx);
                                } else {
                                    throw new InvalidTypeException("No se puede multiplicar un " + t.getType() + " con un " + f.getType());
                                }
                            }
                            RESULT = f;
                            System.out.println("*");
                        :} |
                        term:t DIV factor:f
                        {:
                            if(t != null && f != null) {
                                if(t.getType() == f.getType()) {
                                    int right = factorStack.pop();
                                    int left = termStack.pop();
                                    term_idx = TripleManager.addTriple("/","[" + left + "]", "[" + right + "]");
                                    termStack.push(term_idx);
                                } else {
                                    throw new InvalidTypeException("No se puede dividir un " + t.getType() + " con un " + f.getType());
                                }
                            }
                            RESULT = f;
                            System.out.println("/");
                        :} |
                        factor:f
                        {:
                            term_idx = factorStack.pop();
                            termStack.push(term_idx);
                            RESULT = f;
                            System.out.println("Term = factor");
                        :}
                        ;

factor              ::= IDENTIFIER:id
                        {:
                            SymbolTableGenerator.SymbolT sym = SymbolTableGenerator.getSymbol(id);
                            if(sym != null) {
                                factor_idx = TripleManager.addTriple(id,null,null);
                                factorStack.push(factor_idx);
                                RESULT = sym;
                                System.out.println("Id: " + sym.getName());
                            } else {
                                throw new UndefinedVariableException("La variable: "+ id + " no ha sido definida.");
                            }
                        :} |
                        SUB IDENTIFIER:id
                        {:
                            SymbolTableGenerator.SymbolT sym = SymbolTableGenerator.getSymbol(id);
                            if(sym != null) {
                                factor_idx = TripleManager.addTriple("-",id,null);
                                factorStack.push(factor_idx);
                                RESULT = sym;
                                System.out.println("Id: " + sym.getName());
                            } else {
                                throw new UndefinedVariableException("La variable: "+ id + " no ha sido definida.");
                            }
                        :}
                        |
                        constant:cte
                        {:
                            factor_idx = TripleManager.addTriple(cte.getName(), null, null);
                            factorStack.push(factor_idx);
                            RESULT = cte;
                            System.out.println("Constant: " + cte.getName());
                        :} |
                        SUB constant:cte
                        {:
                            factor_idx = TripleManager.addTriple("-", cte.getName(), null);
                            factorStack.push(factor_idx);
                            RESULT = cte;
                            System.out.println("Constant: " + cte.getName());
                        :} |
                        OPEN_BRACKET expression:e CLOSE_BRACKET
                        {:
                            factor_idx = exprStack.pop();
                            factorStack.push(factor_idx);
                            RESULT = e;
                            System.out.println("Factor = (Expression)");
                        :}
                        ;

constant            ::= INTEGER_CONSTANT:i
                        {:
                            RESULT = SymbolTableGenerator.getSymbol("_"+i);
                        :} |
                        FLOAT_CONSTANT:f
                        {:
                            RESULT = SymbolTableGenerator.getSymbol("_"+f);
                        :}
                        ;

// Cuando se pase por esta regla, siempre se saldrá de acá con un sólo índice apilado, el que corresponda al salto por falso
condition           ::= comparation:cmp
                        {:
                            int falseIdx = TripleManager.addTriple(cmp, "GOTO", null);
                            // Se apila para hacer el salto por caso falso
                            jumpStack.push(falseIdx);
                            System.out.println("condition = comparation");
                        :} |
                        NOT comparation:cmp {:
                            int falseIdx = TripleManager.addTriple(cmp, "GOTO", null);

                            // Bifurcación para salir por caso falso (o sea verdadero)
                            int trueIdx = TripleManager.addTriple("BI", "GOTO", null);
                            jumpStack.push(trueIdx);

                            int thenIdx = TripleManager.addTriple("ET", "THEN", null);

                            // Si fue verdadero (o sea falso) hace un saltito sobre la bifurcación
                            TripleManager.patchTriple(falseIdx, thenIdx);


                            System.out.println("condition = NOT comparation");
                        :} |
                        comparation:cmp
                        {:
                            int falseIdx1 = TripleManager.addTriple(cmp, "GOTO", null);

                            int trueIdx = TripleManager.addTriple("BI", "GOTO", null);
                            // Si fue verdadera se apila para despues salar a la parte verdadera
                            jumpStack.push(trueIdx);

                            int etIdx = TripleManager.addTriple("ET", "OR", null); // es solo la etiqueta

                            TripleManager.patchTriple(falseIdx1, etIdx);
                            // Si la primera comparacion fue falsa, hace un pequeño salto sobre el BI por verdadera
                        :}
                        OR comparation:cmp2
                        {:
                            // Desapilamos ese index de recien para hacer el salto por verdadera
                            int trueIdx = jumpStack.pop();

                            int falseIdx2 = TripleManager.addTriple(cmp2, "GOTO", null);
                            // Se apila para hacer el salto por caso falso, porque ambas dieron falsas
                            jumpStack.push(falseIdx2);

                            int thenIdx = TripleManager.addTriple("ET", "THEN", null);
                            // Hacemos el salto por verdadera
                            TripleManager.patchTriple(trueIdx, thenIdx);

                            System.out.println("condition = comparation OR comparation");
                        :} |
                        comparation:cmp
                        {:
                            int falseIdx1 = TripleManager.addTriple(cmp, "GOTO", null);
                            // Si la primera ya es falsa, va a salir por falso
                            jumpStack.push(falseIdx1);


                        :}
                        AND comparation:cmp2
                        {:
                            int falseIdx2 = TripleManager.addTriple(cmp2, "GOTO", null);
                            // Si la segunda es falsa, tambien va a salir por falso

                            int trueIndx = TripleManager.addTriple("BI", "GOTO", null);
                            // Si ambas son verdaderas, quiero hacer un pequeño salto sobre los tercetos que vienen ahora (hacia index5 + 1)

                            // Ambos indices del salto por falso saltan a la misma lazy
                            int lazyIdx = TripleManager.addTriple("ET", "LAZY_AND", null);
                            TripleManager.patchTriple(falseIdx2, lazyIdx);
                            int falseIdx1 = jumpStack.pop();
                            TripleManager.patchTriple(falseIdx1, lazyIdx);

                            // Despues de que los dos salten a la lazy, se apila la bifurcacion por falso
                            int biIdx = TripleManager.addTriple("BI", "GOTO", null);
                            jumpStack.push(biIdx);

                            int thenIdx = TripleManager.addTriple("ET", "THEN", null);

                             // Hago ese saltito
                            TripleManager.patchTriple(trueIndx, thenIdx);
                            System.out.println("condition = comparation AND comparation");
                        :}
                        ;

comparation         ::= expression:e1 comparator:cmp expression:e2
                        {:
                            if(e1 != null && e2 != null) {
                                if(e1.getType() == e2.getType()) {
                                    int right = exprStack.pop();
                                    int left = exprStack.pop();
                                    TripleManager.addTriple("CMP", "[" + left + "]", "[" + right + "]");
                                } else {
                                    throw new InvalidTypeException("No se puede comparar un tipo de dato: " + e1.getType()
                                    + " con un tipo de dato: " + e2.getType());
                                }
                            }
                            RESULT = cmp;
                            System.out.println("comparation = expression comparator expression");
                        :};

comparator          ::= EQUAL
                        {:
                            RESULT = cmp_map.get("EQUAL");
                            System.out.println("==");
                        :} |
                        NOT_EQUAL
                        {:
                            RESULT = cmp_map.get("NOT_EQUAL");
                            System.out.println("!=");
                        :} |
                        LESS_EQUAL
                        {:
                            RESULT = cmp_map.get("LESS_EQUAL");
                            System.out.println("<=");
                        :} |
                        GREATER_EQUAL
                        {:
                            RESULT = cmp_map.get("GREATER_EQUAL");
                            System.out.println(">=");
                        :} |
                        LESS
                        {:
                            RESULT = cmp_map.get("LESS");
                            System.out.println("<");
                        :} |
                        GREATER
                        {:
                            RESULT = cmp_map.get("GREATER");
                            System.out.println(">");
                        :}
                        ;

function            ::= reorder_function
                        {:
                            System.out.println("function = reorder_function");
                        :} |
                        READ OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET
                        {:
                            SymbolTableGenerator.SymbolT sym = SymbolTableGenerator.getSymbol(id);
                            if(sym != null) {
                                 TripleManager.addTriple("READ", id, null);
                            } else {
                                throw new UndefinedVariableException("La variable: "+ id + " no ha sido definida.");
                            }
                            System.out.println("function = read ( IDENTIFIER )");
                        :} |
                        WRITE OPEN_BRACKET write_args:wa CLOSE_BRACKET
                        {:
                            int index = TripleManager.addTriple("WRITE", wa, null);
                            System.out.println("function = write ( write_args )");
                        :}
                        ;

write_args          ::= IDENTIFIER:id
                        {:
                            SymbolTableGenerator.SymbolT sym = SymbolTableGenerator.getSymbol(id);
                            if(sym != null) {
                                 RESULT = id;
                            } else {
                                throw new UndefinedVariableException("La variable: "+ id + " no ha sido definida.");
                            }
                            System.out.println("write_args = IDENTIFIER");
                        :} |
                        STRING_CONSTANT:sc
                        {:
                            SymbolTableGenerator.SymbolT sym = SymbolTableGenerator.getSymbol(sc);
                            RESULT = sym.getName();
                            System.out.println("write_args = string_constant");
                        :} |
                        constant:cte
                        {:
                            SymbolTableGenerator.SymbolT sym = SymbolTableGenerator.getSymbol("_"+cte);
                            RESULT = sym.getName();
                            System.out.println("write_args = constant");
                        :}
                        ;

reorder_function    ::=  REORDER_FUNCTION OPEN_BRACKET
                        {:
                            // TripleManager.addTriple("ET", "REORDER_BEGIN", null);
                        :}
                        arguments CLOSE_BRACKET
                        {:
                            // TripleManager.addTriple("ET", "REORDER_END", null);
                            System.out.println("reorder_function = reorder ( arguments )");
                        :}
                        ;

arguments           ::= OPEN_SQUARE_BRACKET arguments_list CLOSE_SQUARE_BRACKET COMMA INTEGER_CONSTANT:dir COMMA INTEGER_CONSTANT:pos
                        {:
                            // TripleManager.addTriple("ET", "REORDER_PROCESSING", null);
                            int pivot = Integer.parseInt(pos);
                            int direction = Integer.parseInt(dir);

                            if (pivot < 0 || pivot >= reorderList.size()) {
                                System.err.println("Error: El pivote " + pivot + " está fuera del rango válido.");
                                throw new Exception("Pivote fuera de rango");
                            }

                            List<String> resultList = new ArrayList<>();

                            if (direction == 0) {
                                // Reordenar derecha del pivote (índices pivot+1 en adelante)
                                if (pivot >= reorderList.size() - 1) {
                                    resultList.addAll(reorderList); // nada a reordenar
                                } else {
                                    for (int i = 0; i < pivot; i++) {
                                        resultList.add(reorderList.get(i));
                                    }
                                    for (int i = reorderList.size() - 1; i >= pivot; i--) {
                                        resultList.add(reorderList.get(i));
                                    }
                                }
                            } else if (direction == 1) {
                                // Reordenar izquierda del pivote (índices 0 a pivot-1)
                                if (pivot == 0) {
                                    resultList.addAll(reorderList); // nada a reordenar
                                } else {
                                    for (int i = pivot; i >= 0; i--) {
                                        resultList.add(reorderList.get(i));
                                    }
                                    for (int i = pivot+1; i < reorderList.size(); i++) {
                                        resultList.add(reorderList.get(i));
                                    }
                                }
                            } else {
                                System.err.println("Error: Dirección inválida (debe ser 0 o 1)");
                                throw new Exception("Dirección inválida");
                            }

                            // Generar triples
                            String firstElem = resultList.remove(0);
                            int elemIdx = TripleManager.addTriple(",", firstElem, null);

                            for (String elem : resultList) {
                                elemIdx = TripleManager.addTriple(",", elem, "[" + elemIdx + "]");
                            }

                            reorderList.clear();
                            System.out.println("arguments = [arguments_list], integer_constant, integer_constant");
                        :}
                        ;

arguments_list      ::= arguments_list COMMA expression
                        {:
                            SymbolTableGenerator.insertVariable("@reOrderX" + elemCount, "float");
                            TripleManager.addTriple("=", "@reOrderX" + elemCount, "[" + exprStack.pop() + "]");
                            reorderList.add("@reOrderX" + elemCount);
                            elemCount++;
                            System.out.println("arguments_list = arguments_list , expression");
                        :} |
                        expression
                        {:
                            SymbolTableGenerator.insertVariable("@reOrderX" + elemCount, "float");
                            TripleManager.addTriple("=", "@reOrderX" + elemCount, "[" + exprStack.pop() + "]");
                            reorderList.add("@reOrderX" + elemCount);
                            elemCount++;
                            System.out.println("arguments_list = expression");
                        :}
                        ;

negative_function   ::= NEGATIVE_CALCULATION_FUNCTION OPEN_BRACKET
                        {:
                            TripleManager.addTriple("=", "@count", 0);
                            TripleManager.addTriple("=", "@sum", 0);
                            TripleManager.addTriple("=", "@mult", 0);

                            SymbolTableGenerator.insertVariable("@count", "int");
                            SymbolTableGenerator.insertVariable("@sum", "float");
                            SymbolTableGenerator.insertVariable("@mult", "float");
                            SymbolTableGenerator.insertVariable("@elem", "float");
                            SymbolTableGenerator.insertVariable("@parBit", "float");
                            SymbolTableGenerator.insertVariable("@total", "float");
                        :}
                        float_list CLOSE_BRACKET
                        {:
                            int multIdx = negStack.pop();
                            int sumIdx = negStack.pop();
                            int countIdx = negStack.pop();

                            // if (@count == 0)
                            //  x = @sum
                            //  else
                            //	x = @mult

                            TripleManager.addTriple("CMP", "@count", 0);
                            int falseIdx = TripleManager.addTriple("BNE", "GOTO", null);

                            TripleManager.addTriple("=", "@total", "@sum");
                            int biIdx = TripleManager.addTriple("BI", "GOTO", null);

                            int elseIdx = TripleManager.addTriple("ET", "NEG_FUNC_ELSE", null);
                            TripleManager.addTriple("=", "@total", "@mult");

                            TripleManager.patchTriple(falseIdx, elseIdx);

                            int endIdx = TripleManager.addTriple("ET", "NEG_FUNC_END_IF", null);
                            TripleManager.patchTriple(biIdx, endIdx);

                            System.out.println("negative_function = negativeCalculation ( float_list )");
                        :}
                        ;


float_list          ::= float_element:f
                        {:
                            // if (f < 0)
                            //	 if (@count == 0)
                            //		 @parBit = 1
                            //	 else
                            //		 @parBit = 0
                            //	 @count = @parBit
                            //   @sum = @sum + f
                            //	 @mult = @mult * f

                            TripleManager.addTriple("=", "@elem", "[" + f + "]");
                            TripleManager.addTriple("CMP", "@elem", 0);
                            int falseIdx1 = TripleManager.addTriple("BGE", "GOTO", null);

                            TripleManager.addTriple("CMP", "@count", 0);
                            int falseIdx2 = TripleManager.addTriple("BNE", "GOTO", null);

                            TripleManager.addTriple("=", "@parBit", 1);
                            int biIdx = TripleManager.addTriple("BI", "GOTO", null);

                            int elseIdx = TripleManager.addTriple("ET", "NEG_FUNC_ELSE", null);
                            TripleManager.addTriple("=", "@parBit", 0);

                            TripleManager.patchTriple(falseIdx2, elseIdx);

                            int endIdx = TripleManager.addTriple("ET", "NEG_FUNC_END_IF", null);
                            TripleManager.patchTriple(biIdx, endIdx);

                            int countIdx = TripleManager.addTriple("=", "@count", "@parBit");
                            TripleManager.addTriple("+", "@sum", "@elem");
                            int sumIdx = TripleManager.addTriple("=", "@sum", "[" + TripleManager.getLastIndex() + "]");
                            TripleManager.addTriple("*", "@mult", "@elem");
                            int multIdx = TripleManager.addTriple("=", "@mult", "[" + TripleManager.getLastIndex() + "]");

                            endIdx = TripleManager.addTriple("ET", "NEG_FUNC_END_IF", null);
                            TripleManager.patchTriple(falseIdx1, endIdx);

                            negStack.push(countIdx);
                            negStack.push(sumIdx);
                            negStack.push(multIdx);
                            System.out.println("float_list =" + f);
                        :} |
                        float_list COMMA float_element:f
                        {:
                            negStack.pop();
                            negStack.pop();
                            negStack.pop();

                            // if (f < 0)
                            //	 if (@count == 0)
                            //		 @parBit = 1
                            //	 else
                            //		 @parBit = 0
                            //	 @count = @parBit
                            //   @sum = @sum + f
                            //	 @mult = @mult * f

                            TripleManager.addTriple("=", "@elem", "[" + f + "]");
                            TripleManager.addTriple("CMP", "@elem", 0);
                            int falseIdx1 = TripleManager.addTriple("BGE", "GOTO", null);

                            TripleManager.addTriple("CMP", "@count", 0);
                            int falseIdx2 = TripleManager.addTriple("BNE", "GOTO", null);

                            TripleManager.addTriple("=", "@parBit", 1);
                            int biIdx = TripleManager.addTriple("BI", "GOTO", null);

                            TripleManager.addTriple("=", "@parBit", 0);

                            int elseIdx = TripleManager.addTriple("ET", "NEG_FUNC_ELSE", null);
                            TripleManager.patchTriple(falseIdx2, elseIdx);

                            int endIdx = TripleManager.addTriple("ET", "NEG_FUNC_END_IF", null);
                            TripleManager.patchTriple(biIdx, endIdx);

                            int countIdx = TripleManager.addTriple("=", "@count", "@parBit");
                            TripleManager.addTriple("+", "@sum", "@elem");
                            int sumIdx = TripleManager.addTriple("=", "@sum", "[" + TripleManager.getLastIndex() + "]");
                            TripleManager.addTriple("*", "@mult", "@elem");
                            int multIdx = TripleManager.addTriple("=", "@mult", "[" + TripleManager.getLastIndex() + "]");

                            endIdx = TripleManager.addTriple("ET", "NEG_FUNC_END_IF", null);
                            TripleManager.patchTriple(falseIdx1, endIdx);

                            negStack.push(countIdx);
                            negStack.push(sumIdx);
                            negStack.push(multIdx);
                            System.out.println("float_list , float_element");
                        :}
                        ;

float_element       ::= IDENTIFIER:id
                        {:
                            SymbolTableGenerator.SymbolT sym = SymbolTableGenerator.getSymbol(id);
                            if(sym != null) {
                                if(sym.getType() == "float") {
                                    RESULT = TripleManager.addTriple(id, null, null);
                                } else {
                                    throw  new InvalidTypeException("El tipo de dato de: " + sym.getName() + " no es de tipo:"
                                    + " float. Solo se permiten tipos de datos float en la funcion: negativeCalculation");
                                }
                            } else {
                                throw new UndefinedVariableException("La variable: "+ id + " no ha sido definida.");
                            }
                        :} |
                        FLOAT_CONSTANT:f
                        {:

                            RESULT = TripleManager.addTriple("_" + f, null, null);
                        :} |
                        SUB IDENTIFIER:id
                        {:
                            SymbolTableGenerator.SymbolT sym = SymbolTableGenerator.getSymbol(id);
                            if(sym != null) {
                                if(sym.getType() == "float") {
                                    RESULT = TripleManager.addTriple("-", id, null);
                                } else {
                                    throw  new InvalidTypeException("El tipo de dato de: " + sym.getName() + " no es de tipo:"
                                    + " float. Solo se permiten tipos de datos float en la funcion: negativeCalculation");
                                }
                            } else {
                                throw new UndefinedVariableException("La variable: "+ id + " no ha sido definida.");
                            }
                        :} |
                        SUB FLOAT_CONSTANT:f
                        {:
                            RESULT = TripleManager.addTriple("-", "_" + f, null);
                        :}
                        ;