package lyc.compiler;

import java_cup.runtime.*;

class Parser;

// Terminals

terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;

terminal EQUAL;
terminal NOT_EQUAL;
terminal LESS_EQUAL;
terminal GREATER_EQUAL;
terminal LESS;
terminal GREATER;

terminal ASSIG;

terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;

terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;

terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;

terminal COMMA;
terminal COLON;

terminal WHILE;
terminal IF;
terminal ELSE;
terminal INIT;
terminal TYPE_INT;
terminal TYPE_FLOAT;
terminal TYPE_STRING;

terminal READ;
terminal WRITE;

terminal AND;
terminal OR;
terminal NOT;

terminal REORDER_FUNCTION;
terminal NEGATIVE_CALCULATION_FUNCTION;

terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;
terminal IDENTIFIER;

// Non Terminals
non terminal start_symbol;
non terminal program;
non terminal var_declaration;
non terminal iteration;
non terminal selection;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal condition;
non terminal logic_term;
non terminal logic_factor;
non terminal comparation;
non terminal comparator;
non terminal list_declaration;
non terminal var_list;
non terminal var_type;
non terminal function;
non terminal negative_function;
non terminal constant;
non terminal arguments;
non terminal arguments_list;
non terminal float_list;
non terminal float_element;
non terminal write_args;

// Start Symbol Definition
start with start_symbol;

// Rules
start_symbol        ::= program {: System.out.println("End"); :}
                        ;

program             ::= program sentence {: System.out.println("program = program sentence"); :} |
                        sentence {: System.out.println("program = sentence"); :}
                        ;

sentence            ::= assignment {: System.out.println("sentence = assignment"); :} |
                        var_declaration {: System.out.println("sentence = var_declaration"); :} |
                        iteration {: System.out.println("sentence = iteration"); :} |
                        selection {: System.out.println("sentence = selection"); :} |
                        function {: System.out.println("sentence = function"); :}
                        ;

assignment          ::= IDENTIFIER ASSIG expression {: System.out.println("assignment: id = expression"); :} |
                        IDENTIFIER ASSIG negative_function {: System.out.println("assignment: id = negative_function"); :}
                        ;

selection           ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET {: System.out.println("if (condition) { program }"); :} |
                        IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET ELSE OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET {: System.out.println("if (condition) { program } else { program }"); :}
                        ;

iteration           ::= WHILE OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET {: System.out.println("while (condition) { program }"); :};

var_declaration     ::= INIT OPEN_CURLY_BRACKET list_declaration CLOSE_CURLY_BRACKET {: System.out.println("init { list_declaration }"); :};

list_declaration    ::= list_declaration var_list COLON var_type {: System.out.println("list_declaration var_list : var_type"); :} |
                        var_list COLON var_type {: System.out.println("var_list : var_type"); :}
                        ;

var_list            ::= var_list COMMA IDENTIFIER |
                        IDENTIFIER
                        ;

var_type            ::= TYPE_INT |
                        TYPE_FLOAT |
                        TYPE_STRING
                        ;

expression          ::= expression PLUS term {: System.out.println("+"); :} |
                        expression SUB term {: System.out.println("-"); :} |
                        term {: System.out.println("Expression = Term"); :}
                        ;

term                ::= term MULT factor {: System.out.println("*"); :} |
                        term DIV factor {: System.out.println("/"); :} |
                        factor {: System.out.println("Term = factor"); :}
                        ;

factor              ::= IDENTIFIER:id  {: System.out.println("Id: " + id); :} |
                        SUB IDENTIFIER:id {: System.out.println("Id: " + id); :} |
                        constant:constant {: System.out.println("Constant: " + constant ); :} |
                        SUB constant:constant {: System.out.println("Constant: " + constant); :} |
                        OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :}
                        ;

constant            ::= INTEGER_CONSTANT:i {: RESULT = i; :} |
                        FLOAT_CONSTANT:f {: RESULT = f; :} |
                        STRING_CONSTANT:s {: RESULT = s; :}
                        ;

condition           ::= condition OR logic_term {: System.out.println("condition = condition OR logic_term"); :} |
                        logic_term {: System.out.println("condition = logic_term"); :}
                        ;

logic_term          ::= logic_term AND logic_factor {: System.out.println("logic_term = logic_term AND logic_factor"); :} |
                        logic_factor {: System.out.println("logic_term = logic_factor"); :}
                        ;

logic_factor        ::= NOT logic_factor {: System.out.println("logic_factor = NOT logic_factor"); :} |
                        comparation {: System.out.println("logic_factor = comparation"); :} |
                        OPEN_BRACKET condition CLOSE_BRACKET {: System.out.println("logic_factor = ( expression )"); :}
                        ;

comparation         ::= expression comparator expression {: System.out.println("comparation = expression comparator expression"); :};

comparator          ::= EQUAL |
                        NOT_EQUAL |
                        LESS_EQUAL |
                        GREATER_EQUAL |
                        LESS |
                        GREATER
                        ;

function            ::= REORDER_FUNCTION OPEN_BRACKET arguments CLOSE_BRACKET {: System.out.println("reorder ( arguments )"); :} |
                        READ OPEN_BRACKET IDENTIFIER CLOSE_BRACKET {: System.out.println("read ( IDENTIFIER )"); :} |
                        WRITE OPEN_BRACKET write_args CLOSE_BRACKET {: System.out.println("write ( write_args )"); :}
                        ;

write_args          ::= IDENTIFIER |
                        constant
                        ;

arguments           ::= OPEN_SQUARE_BRACKET arguments_list CLOSE_SQUARE_BRACKET COMMA INTEGER_CONSTANT COMMA INTEGER_CONSTANT
                        ;

arguments_list      ::= arguments_list COMMA expression |
                        expression
                        ;

negative_function   ::= NEGATIVE_CALCULATION_FUNCTION OPEN_BRACKET float_list CLOSE_BRACKET
                        ;

float_list          ::= float_list COMMA float_element
                        ;

float_element       ::= IDENTIFIER |
                        FLOAT_CONSTANT
                        ;